FROM oven/bun:alpine AS baseimage

# Stage 1: Install dependencies
FROM baseimage AS deps

WORKDIR /home/app

# Copy package files for dependency resolution
COPY package.json bun.lock turbo.json ./
COPY apps/api-server/package.json ./apps/api-server/
COPY apps/web/package.json ./apps/web/
COPY apps/reverse-proxy/package.json ./apps/reverse-proxy/
COPY packages/prismaDB/package.json ./packages/prismaDB/
COPY packages/eslint-config/package.json ./packages/eslint-config/
COPY packages/typescript-config/package.json ./packages/typescript-config/

# Ensure Bun installs dependencies exactly as locked and include devDependencies:
# - bun install: install packages via Bun
# - --frozen-lockfile: do not modify the lockfile; fail if it doesn't match package.json
# - --production=false: also install devDependencies (needed for builds/tests)
RUN bun install --frozen-lockfile --production=false


# Stage 2: Production runtime
FROM baseimage AS runner
WORKDIR /home/app

RUN apk add --no-cache openssl

# Create a non-root user and group with specific IDs
RUN addgroup --system --gid 1001 novahost && \
    adduser --system --uid 1001 --ingroup novahost appUser

# Copy the dependencies from the deps stage

COPY --from=deps --chown=appUser:novahost /home/app/node_modules ./node_modules
COPY --from=deps --chown=appUser:novahost /home/app/package.json ./package.json
COPY --from=deps --chown=appUser:novahost /home/app/bun.lock ./bun.lock
COPY --from=deps  --chown=appUser:novahost /home/app/turbo.json ./turbo.json

# Source code
COPY --chown=appUser:novahost apps/api-server ./apps/api-server/
COPY --chown=appUser:novahost packages/ ./packages/


RUN bun run db:generate

# Use the non-root user
USER appUser

EXPOSE 9000

CMD [ "bun", "run", "start:api" ]