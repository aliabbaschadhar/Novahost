generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DeploymentStatus {
  NOT_STARTED
  QUEUED
  IN_PROGRESS
  SUCCESS
  FAILED
}

model Account {
  id                String  @id @default(cuid()) // cuid==> Collision free uid ==> Advance form uuid
  userId            String
  type              String // type of account(e.g. oauth, email, credentials)
  provider          String // Which provider? e.g. google, github, email
  providerAccountId String // The ID the provider gives you e.g. Google user ID, Github user ID
  refresh_token     String? @db.Text() // Stores OAuth refresh token for renewing access tokens
  access_token      String? @db.Text() // Stores OAuth access token for API requests
  expires_at        Int? // Timestamp when the access token expires
  token_type        String? // Type of the token (e.g., Bearer)
  scope             String? // Scopes granted by the OAuth provider like to only read the user's profile and email
  id_token          String? @db.Text() // Stores OpenID Connect ID token if provided
  session_state     String? // Used by some providers to maintain session state like when the logs out from the account,using session state we can also know that

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  firstName     String?
  lastName      String?
  password      String?
  projects      Project[]
  account       Account[]
  session       Session[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique // The actual session token stored in the user's cookie
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id           String       @id @default(uuid())
  name         String
  gitURL       String
  subdomain    String
  customDomain String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  Deployments  Deployment[]
  User         User?        @relation(fields: [userId], references: [id])
  userId       String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Deployment {
  id        String           @id @default(uuid())
  status    DeploymentStatus @default(NOT_STARTED)
  createdAt DateTime         @default(now())
  updateAt  DateTime         @updatedAt
  Project   Project?         @relation(fields: [projectId], references: [id])
  projectId String?
}
